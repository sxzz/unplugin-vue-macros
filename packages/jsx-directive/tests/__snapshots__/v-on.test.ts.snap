// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`jsx-vue-directive > vue 2.7 v-on > ./fixtures/v-on/child.setup.tsx 1`] = `
"type T = DefineGeneric

const { bar } = defineProps<{
  bar: T
}>()

const slots = defineSlots<{
  default: () => any
  bottom: (props: { foo: 1 }) => any
}>()

const emit = defineEmits<{
  log: [foo: T]
  click: []
}>()

export default (
  <form v-on:submit_prevent={() => {}} onClick={() => emit('log', bar)}>
    <slots.default />
  </form>
)
"
`;

exports[`jsx-vue-directive > vue 2.7 v-on > ./fixtures/v-on/index.setup.tsx 1`] = `
"import { expectTypeOf } from 'expect-type'
import Child from './child.setup'

let bar = $ref('')
export default (
  <fieldset>
    <legend>v-on</legend>

    <Child
      bar={bar}
      on={{ log: (e) => expectTypeOf<string>(e) }}
      v-on:click_capture_stop={() => console.log('stopped')}
    >
      <input
        value={bar}
        v-on:input_prevent={(event: any) => (bar = event.target.value)}
        v-on:keydown_down={() => {}}
        v-on:keydown_up={() => {}}
      />
      {bar}
    </Child>
  </fieldset>
)
"
`;

exports[`jsx-vue-directive > vue 3 v-on > ./fixtures/v-on/child.setup.tsx 1`] = `
"
import { withModifiers as __MACROS_withModifiers } from "@vue-macros/jsx-directive/helpers";type T = DefineGeneric

const { bar } = defineProps<{
  bar: T
}>()

const slots = defineSlots<{
  default: () => any
  bottom: (props: { foo: 1 }) => any
}>()

const emit = defineEmits<{
  log: [foo: T]
  click: []
}>()

export default (
  <form onSubmit={__MACROS_withModifiers(() => {}, ['prevent'])} onClick={() => emit('log', bar)}>
    <slots.default />
  </form>
)
"
`;

exports[`jsx-vue-directive > vue 3 v-on > ./fixtures/v-on/index.setup.tsx 1`] = `
"
import { withModifiers as __MACROS_withModifiers } from "@vue-macros/jsx-directive/helpers";
import { withKeys as __MACROS_withKeys } from "@vue-macros/jsx-directive/helpers";const __MACROS_transformVOn = (obj) => Object.entries(obj).reduce((res, [key, value]) => (res['on' + key[0].toUpperCase() + key.slice(1)] = value, res), {});import { expectTypeOf } from 'expect-type'
import Child from './child.setup'

let bar = $ref('')
export default (
  <fieldset>
    <legend>v-on</legend>

    <Child
      bar={bar}
      {...__MACROS_transformVOn({ log: (e) => expectTypeOf<string>(e) })}
      onClickCapture={__MACROS_withModifiers(() => console.log('stopped'), ['stop'])}
    >
      <input
        value={bar}
        onInput={__MACROS_withModifiers((event: any) => (bar = event.target.value), ['prevent'])}
        onKeydown={__MACROS_withKeys(() => {}, ['down'])}
        onKeydown={__MACROS_withKeys(() => {}, ['up'])}
      />
      {bar}
    </Child>
  </fieldset>
)
"
`;
