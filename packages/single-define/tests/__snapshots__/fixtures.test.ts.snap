// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`fixtures > ./fixtures/define-emit.basic.vue 1`] = `
"<script setup lang=\\"ts\\">
 const __MACROS__root_emit = defineEmits(['foo'])

import { expectTypeOf } from 'expect-type'

const foo = (payload) => __MACROS__root_emit('foo', payload)

expectTypeOf(foo).toEqualTypeOf<() => void>()

</script>

<template>
  <div></div>
</template>
"
`;

exports[`fixtures > ./fixtures/define-emit.detalhed.vue 1`] = `
"<script setup lang=\\"ts\\">
 const __MACROS__root_emit = defineEmits({
      foo: (payload) => typeof payload === 'string'
    })

import { expectTypeOf } from 'expect-type'

const foo = (payload) => __MACROS__root_emit('foo', payload)

expectTypeOf(foo).toEqualTypeOf<(payload: string) => void>()

</script>

<template>
  <div></div>
</template>
"
`;

exports[`fixtures > ./fixtures/define-prop.basic.vue 1`] = `
"<script setup lang=\\"ts\\">
 const __MACROS__root_props = defineProps(['foo'])

import { computed as __MACROS_computed } from 'vue';
import { expectTypeOf } from 'expect-type'
import type { ComputedRef } from 'vue'

const foo = __MACROS_computed(() => __MACROS__root_props.foo)

expectTypeOf(foo).toEqualTypeOf<ComputedRef<string>>()

</script>

<template>
  <div></div>
</template>
"
`;

exports[`fixtures > ./fixtures/define-prop.detalhed.vue 1`] = `
"<script setup lang=\\"ts\\">
 const __MACROS__root_props = defineProps({
    foo: {
    type: String,
    required: true,
    default: 'foo'
}, bar: {
    type: [Number, Array],
    required: true,
    default: () => [1, 2, 3]
}
  })

import { computed as __MACROS_computed } from 'vue';
import { expectTypeOf } from 'expect-type'
import type { ComputedRef } from 'vue'

const foo = __MACROS_computed(() => __MACROS__root_props.foo)

const bar = __MACROS_computed(() => __MACROS__root_props.bar)

expectTypeOf(foo).toEqualTypeOf<ComputedRef<string>>()
expectTypeOf(bar).toEqualTypeOf<ComputedRef<number[]>>()

</script>

<template>
  <div></div>
</template>
"
`;
